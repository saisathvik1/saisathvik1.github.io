<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sai Sathvik</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Posts on Sai Sathvik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 18 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My Internship Experience at A10 Networks</title>
      <link>http://localhost:1313/posts/internship-experience/</link>
      <pubDate>Mon, 18 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/internship-experience/</guid>
      
      <description>&lt;p&gt;After a long internship search, I got my first internship offer from A10 Networks as a Threat Research Intern.
&lt;img src=&#34;http://localhost:1313/posts/internship-experience/a10.png&#34; alt=&#34;A10 Networks&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;project---hacking-hackers&#34;&gt;Project - Hacking Hackers&lt;/h3&gt;
&lt;p&gt;My goal is to build a Mirai Botnet tracker that tracks the victims in the early phases of the attack. As this is research work, the goals are not fixed. And why Mirai? Coz it&amp;rsquo;s very common.
First, I started with analyzing the Mirai malware from Malware Bazaar by doing static and dynamic analysis. After so many trials, I figured out a unique technique(might get a patent for this ü•≥) and built a tracker, as well as some other side quests that got good feedback.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Cool things I did at DefCon 33</title>
      <link>http://localhost:1313/posts/defcon-33/</link>
      <pubDate>Tue, 12 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/defcon-33/</guid>
      
      <description>&lt;p&gt;I went to DefCon once again, and I loved it this time too. Unlike last time, I attended some talks as well. This gave me motivation to work on cool projects.&lt;/p&gt;
&lt;h3 id=&#34;ctfs&#34;&gt;CTFs&lt;/h3&gt;
&lt;p&gt;I participated in CTFs at Bug Bounty, Maritime Hacking, Red ICS, Recon, and Adversary Villages. I didn‚Äôt completely lock in but solved a few challenges. One of the main roadblocks I experienced was bad WiFi‚Äîit was very slow, and since these challenges require some research and GPTing, I had to rely on my hotspot, which wasn‚Äôt great either.&lt;br&gt;
I really liked the Red ICS CTF and solved 6 challenges.&lt;br&gt;
Scammed a scammer at the Scambait Village, wasted his time, and won a t-shirt ü•≥ü•≥&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>CVE-2024-47062 PoC</title>
      <link>http://localhost:1313/posts/cve-2024-47062-poc/</link>
      <pubDate>Tue, 12 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/cve-2024-47062-poc/</guid>
      
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/posts/cve-2024-47062-poc/navidrome_logo.png&#34; alt=&#34;Landscape&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;GitHub link&lt;/em&gt;: &lt;a href=&#34;https://github.com/saisathvik1/CVE-2024-47062&#34;&gt;https://github.com/saisathvik1/CVE-2024-47062&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This PoC demonstrates how an SQL Injection vulnerability in Navidrome (CVE-2024-47062) can be exploited to gain admin access. It explains how SQL Injection can reveal sensitive data, how to use a JWT token to obtain admin privileges, and how to decrypt passwords with a hardcoded key stored in Navidrome. This project was created for our Hacking and Offensive Security class (18-739D) at CMU.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Team: Michael Crotty, Annie Liu, Tilden Jackson, Sai Sathvik&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Binary Exploitation: Understanding What Happens When an Executable Runs</title>
      <link>http://localhost:1313/posts/binary-exploitation-1/</link>
      <pubDate>Sun, 25 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/binary-exploitation-1/</guid>
      
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/posts/binary-exploitation-1/cpu-bin1.jpeg&#34; alt=&#34;Landscape&#34;&gt;
When you write a C program, such as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code outputs 200. But what exactly happens from writing this code to seeing the output? Let‚Äôs break down the process of compiling and running this program.&lt;/p&gt;
&lt;h3 id=&#34;what-is-compiling&#34;&gt;What is Compiling?&lt;/h3&gt;
&lt;p&gt;Compiling converts human-readable C code into machine code that the computer can execute. Here‚Äôs how you can compile your code:&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>OSCP Cheatsheet</title>
      <link>http://localhost:1313/posts/oscp-cheatsheet/</link>
      <pubDate>Wed, 21 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/oscp-cheatsheet/</guid>
      
      <description>&lt;p&gt;&lt;strong&gt;Prepared as part of my OSCP Preparation.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Successfully passed the OSCP exam on May 20, 2024. Verify my achievement &lt;a href=&#34;https://www.credential.net/666b9a86-017d-48fa-894a-5c39ef1d7b7b&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Feel free to open a pull request if you have any corrections, improvements, or new additions!&lt;/li&gt;
&lt;li&gt;You can access my cheatsheet from here: &lt;a href=&#34;https://s4thv1k.com/posts/oscp-cheatsheet/&#34;&gt;https://s4thv1k.com/posts/oscp-cheatsheet/&lt;/a&gt; as well!&lt;/li&gt;
&lt;li&gt;Helped over 20 individuals in passing their exam:) Please let me know if this helped you too ‚ù§Ô∏è&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;general&#34;&gt;General&lt;/h1&gt;
&lt;aside&gt;
üí° For Finding all important files in Windows (CTF Style)
&lt;p&gt;&lt;code&gt;cd c:\Users&lt;/code&gt; then
&lt;code&gt;tree /F&lt;/code&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://localhost:1313/pages/about/</link>
      <pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/pages/about/</guid>
      
      <description>&lt;p&gt;I&amp;rsquo;m &lt;strong&gt;Sai Sathvik Ruppa&lt;/strong&gt;, a cybersecurity researcher and OSCP certified professional currently pursuing my Master&amp;rsquo;s in Information Security at Carnegie Mellon University.&lt;/p&gt;
&lt;h2 id=&#34;what-i-do&#34;&gt;What I Do&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OSCP Certified&lt;/strong&gt; penetration tester&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CTF Player&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content Creator&lt;/strong&gt; - 17K+ YouTube subscribers, 350+ free tutorials&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;current-focus&#34;&gt;Current Focus&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Preparing for OSEP&lt;/li&gt;
&lt;li&gt;Exploring new domains&lt;/li&gt;
&lt;li&gt;Applying to Full time positions&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;In cybersecurity, the best defense is understanding the offense.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
